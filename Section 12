Section 12 :- On We Go... To Redux! (1 Hour 12 Min)
------------------------------------
1. Introduction to Redux 
	Redux is a State Management Library
	Makes creating complex applications easier
	Not required to create a React app!
	Not explicitly designed to work with React
	
2. Redux by Analogy
	Story(analogy) to help you understand Redux 
	Write some code in Codepen with Redux only 
	Work on a React app 
	Understand how to integrate React with Redux 

	Redux Cycle 
	Action Creator -> Action -> dispatch -> Reducers -> State
	Person dropping off -> the form -> form receiver -> Departments -> Compiled department data 
	
	the form 

3. A Bit More Analogy 
4. Finishing the Analogy 
5. Mapping the Analogy to Redux 
6. Modeling with Redux 
	Action -> Create Policy
						Form -> Type -> Policy
								Payload -> Name : Alexa,
										   Cash : $20	
		   -> Create Claim
						Form -> Type -> CLAIM 
							 -> Payload -> Name: Alexa, 
		    							   Claim Amount: $500			
		   -> Delete Policy
						Form -> Type -> Policy	
							 -> Payload -> Name: Alexa
	
	const createPolicy = (name, amount) => {
		return {
			type : 'CREATE_POLICY',
			payload : {
				name : name,
				amount : amount
			}
		};
	};
	
	const createClaim = (name, amountOfMoneyToCollect) => {
		return {
			type : 'CREATE_CLAIM',
			payload : {
				name : name,
				amountOfMoneyToCollect:  amountOfMoneyToCollect
			}
		};
	};
	
	const deletePolicy = (name) => {
		return {
			type : 'DELETE_POLICY',
			payload : { name : name }
		};
	};
	
7. Creating Reducers 
	Claims History 
		Claim, Form
	
	//Reducers (Departments!)
	const claimsHistory = (oldListOfClaims = [], action) => {
		if(action.type === 'CREATE_CLAIM'){
			return [...oldListOfClaims, action.payload];
		}
	}
	return oldListOfClaims;
   };
	
   const accounting = (bagOfMoney = 100, action) => {
		if(action.type === 'CREATE_CLAIM') {
			return bagOfMoney - action.payload.amountOfMoneyToCollect;
		}
		else if(action.type === 'CREATE_POLICY'){
			return bagOfMoney + action.payload.amount;
		}
	return bagOfMoney;
   };

   const policies = (listOfPolicies = [], action) => {
		if(action.type === 'CREATE_POLICY'){
			return [...listOfPolicies, action.payload.name];
		}
		else if(action.type === 'DELETE_POLICY'){
			return listOfPolicies.filter(name => name !== action.payload.name);
			}
		}
	return listOfPolicies;
   };
   
   
   console.log(Redux);
   
   const { createStore, combineReducers } = Redux;
   
   const ourDepartments = combineReducers({
		accounting: accounting,
		claimsHistory : claimsHistory, = 
		policies: policies
   });
   
   const store = createStore(ourDepartments);
   
   const action = createPolicy('Alex', 20);
   const action = createPolicy('Jim', 30);
   const action = createPolicy('Bob', 0);
     
   store.dispatch(action);
   
   console.log(store.getState());
   
   const action = createClaim('Jane', 80);
   
   store.dispatch(action);
   
   console.log(store.getState());
   
   const action = deletePolicy('Losily');
   
   store.dispatch(action);
   
   
8. Rules of Reducers 
9. Testing Our Example 
10. Important Redux Notes 	
